# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from nortek_dvl/DvlStatus.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import std_msgs.msg

class DvlStatus(genpy.Message):
  _md5sum = "e1789433d0fd4a0c672172f8d32e464d"
  _type = "nortek_dvl/DvlStatus"
  _has_header = True #flag to mark the presence of a Header object
  _full_text = """Header header

bool b1_vel_valid
bool b2_vel_valid
bool b3_vel_valid
bool b4_vel_valid

bool b1_dist_valid
bool b2_dist_valid
bool b3_dist_valid
bool b4_dist_valid

bool b1_fom_valid
bool b2_fom_valid
bool b3_fom_valid
bool b4_fom_valid

bool x_vel_valid
bool y_vel_valid
bool z1_vel_valid
bool z2_vel_valid

bool x_fom_valid
bool y_fom_valid
bool z1_fom_valid
bool z2_fom_valid

int8 proc_cap
string wakeup_state

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id
"""
  __slots__ = ['header','b1_vel_valid','b2_vel_valid','b3_vel_valid','b4_vel_valid','b1_dist_valid','b2_dist_valid','b3_dist_valid','b4_dist_valid','b1_fom_valid','b2_fom_valid','b3_fom_valid','b4_fom_valid','x_vel_valid','y_vel_valid','z1_vel_valid','z2_vel_valid','x_fom_valid','y_fom_valid','z1_fom_valid','z2_fom_valid','proc_cap','wakeup_state']
  _slot_types = ['std_msgs/Header','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','int8','string']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,b1_vel_valid,b2_vel_valid,b3_vel_valid,b4_vel_valid,b1_dist_valid,b2_dist_valid,b3_dist_valid,b4_dist_valid,b1_fom_valid,b2_fom_valid,b3_fom_valid,b4_fom_valid,x_vel_valid,y_vel_valid,z1_vel_valid,z2_vel_valid,x_fom_valid,y_fom_valid,z1_fom_valid,z2_fom_valid,proc_cap,wakeup_state

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(DvlStatus, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.b1_vel_valid is None:
        self.b1_vel_valid = False
      if self.b2_vel_valid is None:
        self.b2_vel_valid = False
      if self.b3_vel_valid is None:
        self.b3_vel_valid = False
      if self.b4_vel_valid is None:
        self.b4_vel_valid = False
      if self.b1_dist_valid is None:
        self.b1_dist_valid = False
      if self.b2_dist_valid is None:
        self.b2_dist_valid = False
      if self.b3_dist_valid is None:
        self.b3_dist_valid = False
      if self.b4_dist_valid is None:
        self.b4_dist_valid = False
      if self.b1_fom_valid is None:
        self.b1_fom_valid = False
      if self.b2_fom_valid is None:
        self.b2_fom_valid = False
      if self.b3_fom_valid is None:
        self.b3_fom_valid = False
      if self.b4_fom_valid is None:
        self.b4_fom_valid = False
      if self.x_vel_valid is None:
        self.x_vel_valid = False
      if self.y_vel_valid is None:
        self.y_vel_valid = False
      if self.z1_vel_valid is None:
        self.z1_vel_valid = False
      if self.z2_vel_valid is None:
        self.z2_vel_valid = False
      if self.x_fom_valid is None:
        self.x_fom_valid = False
      if self.y_fom_valid is None:
        self.y_fom_valid = False
      if self.z1_fom_valid is None:
        self.z1_fom_valid = False
      if self.z2_fom_valid is None:
        self.z2_fom_valid = False
      if self.proc_cap is None:
        self.proc_cap = 0
      if self.wakeup_state is None:
        self.wakeup_state = ''
    else:
      self.header = std_msgs.msg.Header()
      self.b1_vel_valid = False
      self.b2_vel_valid = False
      self.b3_vel_valid = False
      self.b4_vel_valid = False
      self.b1_dist_valid = False
      self.b2_dist_valid = False
      self.b3_dist_valid = False
      self.b4_dist_valid = False
      self.b1_fom_valid = False
      self.b2_fom_valid = False
      self.b3_fom_valid = False
      self.b4_fom_valid = False
      self.x_vel_valid = False
      self.y_vel_valid = False
      self.z1_vel_valid = False
      self.z2_vel_valid = False
      self.x_fom_valid = False
      self.y_fom_valid = False
      self.z1_fom_valid = False
      self.z2_fom_valid = False
      self.proc_cap = 0
      self.wakeup_state = ''

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_20Bb().pack(_x.b1_vel_valid, _x.b2_vel_valid, _x.b3_vel_valid, _x.b4_vel_valid, _x.b1_dist_valid, _x.b2_dist_valid, _x.b3_dist_valid, _x.b4_dist_valid, _x.b1_fom_valid, _x.b2_fom_valid, _x.b3_fom_valid, _x.b4_fom_valid, _x.x_vel_valid, _x.y_vel_valid, _x.z1_vel_valid, _x.z2_vel_valid, _x.x_fom_valid, _x.y_fom_valid, _x.z1_fom_valid, _x.z2_fom_valid, _x.proc_cap))
      _x = self.wakeup_state
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 21
      (_x.b1_vel_valid, _x.b2_vel_valid, _x.b3_vel_valid, _x.b4_vel_valid, _x.b1_dist_valid, _x.b2_dist_valid, _x.b3_dist_valid, _x.b4_dist_valid, _x.b1_fom_valid, _x.b2_fom_valid, _x.b3_fom_valid, _x.b4_fom_valid, _x.x_vel_valid, _x.y_vel_valid, _x.z1_vel_valid, _x.z2_vel_valid, _x.x_fom_valid, _x.y_fom_valid, _x.z1_fom_valid, _x.z2_fom_valid, _x.proc_cap,) = _get_struct_20Bb().unpack(str[start:end])
      self.b1_vel_valid = bool(self.b1_vel_valid)
      self.b2_vel_valid = bool(self.b2_vel_valid)
      self.b3_vel_valid = bool(self.b3_vel_valid)
      self.b4_vel_valid = bool(self.b4_vel_valid)
      self.b1_dist_valid = bool(self.b1_dist_valid)
      self.b2_dist_valid = bool(self.b2_dist_valid)
      self.b3_dist_valid = bool(self.b3_dist_valid)
      self.b4_dist_valid = bool(self.b4_dist_valid)
      self.b1_fom_valid = bool(self.b1_fom_valid)
      self.b2_fom_valid = bool(self.b2_fom_valid)
      self.b3_fom_valid = bool(self.b3_fom_valid)
      self.b4_fom_valid = bool(self.b4_fom_valid)
      self.x_vel_valid = bool(self.x_vel_valid)
      self.y_vel_valid = bool(self.y_vel_valid)
      self.z1_vel_valid = bool(self.z1_vel_valid)
      self.z2_vel_valid = bool(self.z2_vel_valid)
      self.x_fom_valid = bool(self.x_fom_valid)
      self.y_fom_valid = bool(self.y_fom_valid)
      self.z1_fom_valid = bool(self.z1_fom_valid)
      self.z2_fom_valid = bool(self.z2_fom_valid)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.wakeup_state = str[start:end].decode('utf-8')
      else:
        self.wakeup_state = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_20Bb().pack(_x.b1_vel_valid, _x.b2_vel_valid, _x.b3_vel_valid, _x.b4_vel_valid, _x.b1_dist_valid, _x.b2_dist_valid, _x.b3_dist_valid, _x.b4_dist_valid, _x.b1_fom_valid, _x.b2_fom_valid, _x.b3_fom_valid, _x.b4_fom_valid, _x.x_vel_valid, _x.y_vel_valid, _x.z1_vel_valid, _x.z2_vel_valid, _x.x_fom_valid, _x.y_fom_valid, _x.z1_fom_valid, _x.z2_fom_valid, _x.proc_cap))
      _x = self.wakeup_state
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 21
      (_x.b1_vel_valid, _x.b2_vel_valid, _x.b3_vel_valid, _x.b4_vel_valid, _x.b1_dist_valid, _x.b2_dist_valid, _x.b3_dist_valid, _x.b4_dist_valid, _x.b1_fom_valid, _x.b2_fom_valid, _x.b3_fom_valid, _x.b4_fom_valid, _x.x_vel_valid, _x.y_vel_valid, _x.z1_vel_valid, _x.z2_vel_valid, _x.x_fom_valid, _x.y_fom_valid, _x.z1_fom_valid, _x.z2_fom_valid, _x.proc_cap,) = _get_struct_20Bb().unpack(str[start:end])
      self.b1_vel_valid = bool(self.b1_vel_valid)
      self.b2_vel_valid = bool(self.b2_vel_valid)
      self.b3_vel_valid = bool(self.b3_vel_valid)
      self.b4_vel_valid = bool(self.b4_vel_valid)
      self.b1_dist_valid = bool(self.b1_dist_valid)
      self.b2_dist_valid = bool(self.b2_dist_valid)
      self.b3_dist_valid = bool(self.b3_dist_valid)
      self.b4_dist_valid = bool(self.b4_dist_valid)
      self.b1_fom_valid = bool(self.b1_fom_valid)
      self.b2_fom_valid = bool(self.b2_fom_valid)
      self.b3_fom_valid = bool(self.b3_fom_valid)
      self.b4_fom_valid = bool(self.b4_fom_valid)
      self.x_vel_valid = bool(self.x_vel_valid)
      self.y_vel_valid = bool(self.y_vel_valid)
      self.z1_vel_valid = bool(self.z1_vel_valid)
      self.z2_vel_valid = bool(self.z2_vel_valid)
      self.x_fom_valid = bool(self.x_fom_valid)
      self.y_fom_valid = bool(self.y_fom_valid)
      self.z1_fom_valid = bool(self.z1_fom_valid)
      self.z2_fom_valid = bool(self.z2_fom_valid)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.wakeup_state = str[start:end].decode('utf-8')
      else:
        self.wakeup_state = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_20Bb = None
def _get_struct_20Bb():
    global _struct_20Bb
    if _struct_20Bb is None:
        _struct_20Bb = struct.Struct("<20Bb")
    return _struct_20Bb
