# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from imu_3dm_gx4/FilterOutput.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg
import std_msgs.msg

class FilterOutput(genpy.Message):
  _md5sum = "9ebeb70bfcf2c275d32570ff4a241bad"
  _type = "imu_3dm_gx4/FilterOutput"
  _has_header = True #flag to mark the presence of a Header object
  _full_text = """# Output from the 3DM-GX4 attitude estimation filter.

# Note on status flags:
# Status flags are implemented as bit-fields.
#  0 = invalid
#  1 = valid
#  2 = valid and referenced to magnetic north
#
# Note that covariance on orientation becomes invalid as pitch angle exceeds 70 # degrees. 
# This will be indicated by the status flag.

std_msgs/Header header

# Quaternion, and status
geometry_msgs/Quaternion quaternion
uint16 quaternion_status

# Gyroscope Euler angles roll, pitch, yaw, and status
geometry_msgs/Vector3 euler_rpy #Roll, Pitch, and Yaw in [radians]
float64 euler_rpy_status
float64[9] euler_angle_covariance
uint16 euler_angle_covariance_status

# Heading Update Data
float64 heading_update_alt #Heading in [radians]
float64 heading_update_LORD #Heading in [radians]
float64 heading_update_uncertainty #1-sigma heading uncertainty
float64 heading_update_source
float64 heading_update_flags #0 = no update received within 2 sec, 1 = update received within 2 sec

# Gyro bias, diagonal covariance, and status
geometry_msgs/Vector3 gyro_bias #Gyro bias from sensor frame [radians/sec]
uint16 gyro_bias_status
float64[9] gyro_bias_covariance
uint16 gyro_bias_covariance_status

# Linear accelerations along x,y,z axes, and status
geometry_msgs/Vector3 linear_acceleration #X, Y, and Z axes in [m/s^2]
float64 linear_acceleration_status

# Angular rates along x,y,z axes, and status
geometry_msgs/Vector3 angular_velocity #X, Y, and Z axes in [radians/s]
float64 angular_velocity_status

# Constants
uint16 STATUS_INVALID = 0
uint16 STATUS_VALID = 1
uint16 STATUS_VALID_REFERENCED = 2

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id

================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w

================================================================================
MSG: geometry_msgs/Vector3
# This represents a vector in free space. 
# It is only meant to represent a direction. Therefore, it does not
# make sense to apply a translation to it (e.g., when applying a 
# generic rigid transformation to a Vector3, tf2 will only apply the
# rotation). If you want your data to be translatable too, use the
# geometry_msgs/Point message instead.

float64 x
float64 y
float64 z"""
  # Pseudo-constants
  STATUS_INVALID = 0
  STATUS_VALID = 1
  STATUS_VALID_REFERENCED = 2

  __slots__ = ['header','quaternion','quaternion_status','euler_rpy','euler_rpy_status','euler_angle_covariance','euler_angle_covariance_status','heading_update_alt','heading_update_LORD','heading_update_uncertainty','heading_update_source','heading_update_flags','gyro_bias','gyro_bias_status','gyro_bias_covariance','gyro_bias_covariance_status','linear_acceleration','linear_acceleration_status','angular_velocity','angular_velocity_status']
  _slot_types = ['std_msgs/Header','geometry_msgs/Quaternion','uint16','geometry_msgs/Vector3','float64','float64[9]','uint16','float64','float64','float64','float64','float64','geometry_msgs/Vector3','uint16','float64[9]','uint16','geometry_msgs/Vector3','float64','geometry_msgs/Vector3','float64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,quaternion,quaternion_status,euler_rpy,euler_rpy_status,euler_angle_covariance,euler_angle_covariance_status,heading_update_alt,heading_update_LORD,heading_update_uncertainty,heading_update_source,heading_update_flags,gyro_bias,gyro_bias_status,gyro_bias_covariance,gyro_bias_covariance_status,linear_acceleration,linear_acceleration_status,angular_velocity,angular_velocity_status

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(FilterOutput, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.quaternion is None:
        self.quaternion = geometry_msgs.msg.Quaternion()
      if self.quaternion_status is None:
        self.quaternion_status = 0
      if self.euler_rpy is None:
        self.euler_rpy = geometry_msgs.msg.Vector3()
      if self.euler_rpy_status is None:
        self.euler_rpy_status = 0.
      if self.euler_angle_covariance is None:
        self.euler_angle_covariance = [0.] * 9
      if self.euler_angle_covariance_status is None:
        self.euler_angle_covariance_status = 0
      if self.heading_update_alt is None:
        self.heading_update_alt = 0.
      if self.heading_update_LORD is None:
        self.heading_update_LORD = 0.
      if self.heading_update_uncertainty is None:
        self.heading_update_uncertainty = 0.
      if self.heading_update_source is None:
        self.heading_update_source = 0.
      if self.heading_update_flags is None:
        self.heading_update_flags = 0.
      if self.gyro_bias is None:
        self.gyro_bias = geometry_msgs.msg.Vector3()
      if self.gyro_bias_status is None:
        self.gyro_bias_status = 0
      if self.gyro_bias_covariance is None:
        self.gyro_bias_covariance = [0.] * 9
      if self.gyro_bias_covariance_status is None:
        self.gyro_bias_covariance_status = 0
      if self.linear_acceleration is None:
        self.linear_acceleration = geometry_msgs.msg.Vector3()
      if self.linear_acceleration_status is None:
        self.linear_acceleration_status = 0.
      if self.angular_velocity is None:
        self.angular_velocity = geometry_msgs.msg.Vector3()
      if self.angular_velocity_status is None:
        self.angular_velocity_status = 0.
    else:
      self.header = std_msgs.msg.Header()
      self.quaternion = geometry_msgs.msg.Quaternion()
      self.quaternion_status = 0
      self.euler_rpy = geometry_msgs.msg.Vector3()
      self.euler_rpy_status = 0.
      self.euler_angle_covariance = [0.] * 9
      self.euler_angle_covariance_status = 0
      self.heading_update_alt = 0.
      self.heading_update_LORD = 0.
      self.heading_update_uncertainty = 0.
      self.heading_update_source = 0.
      self.heading_update_flags = 0.
      self.gyro_bias = geometry_msgs.msg.Vector3()
      self.gyro_bias_status = 0
      self.gyro_bias_covariance = [0.] * 9
      self.gyro_bias_covariance_status = 0
      self.linear_acceleration = geometry_msgs.msg.Vector3()
      self.linear_acceleration_status = 0.
      self.angular_velocity = geometry_msgs.msg.Vector3()
      self.angular_velocity_status = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_4dH4d().pack(_x.quaternion.x, _x.quaternion.y, _x.quaternion.z, _x.quaternion.w, _x.quaternion_status, _x.euler_rpy.x, _x.euler_rpy.y, _x.euler_rpy.z, _x.euler_rpy_status))
      buff.write(_get_struct_9d().pack(*self.euler_angle_covariance))
      _x = self
      buff.write(_get_struct_H8dH().pack(_x.euler_angle_covariance_status, _x.heading_update_alt, _x.heading_update_LORD, _x.heading_update_uncertainty, _x.heading_update_source, _x.heading_update_flags, _x.gyro_bias.x, _x.gyro_bias.y, _x.gyro_bias.z, _x.gyro_bias_status))
      buff.write(_get_struct_9d().pack(*self.gyro_bias_covariance))
      _x = self
      buff.write(_get_struct_H8d().pack(_x.gyro_bias_covariance_status, _x.linear_acceleration.x, _x.linear_acceleration.y, _x.linear_acceleration.z, _x.linear_acceleration_status, _x.angular_velocity.x, _x.angular_velocity.y, _x.angular_velocity.z, _x.angular_velocity_status))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.quaternion is None:
        self.quaternion = geometry_msgs.msg.Quaternion()
      if self.euler_rpy is None:
        self.euler_rpy = geometry_msgs.msg.Vector3()
      if self.gyro_bias is None:
        self.gyro_bias = geometry_msgs.msg.Vector3()
      if self.linear_acceleration is None:
        self.linear_acceleration = geometry_msgs.msg.Vector3()
      if self.angular_velocity is None:
        self.angular_velocity = geometry_msgs.msg.Vector3()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 66
      (_x.quaternion.x, _x.quaternion.y, _x.quaternion.z, _x.quaternion.w, _x.quaternion_status, _x.euler_rpy.x, _x.euler_rpy.y, _x.euler_rpy.z, _x.euler_rpy_status,) = _get_struct_4dH4d().unpack(str[start:end])
      start = end
      end += 72
      self.euler_angle_covariance = _get_struct_9d().unpack(str[start:end])
      _x = self
      start = end
      end += 68
      (_x.euler_angle_covariance_status, _x.heading_update_alt, _x.heading_update_LORD, _x.heading_update_uncertainty, _x.heading_update_source, _x.heading_update_flags, _x.gyro_bias.x, _x.gyro_bias.y, _x.gyro_bias.z, _x.gyro_bias_status,) = _get_struct_H8dH().unpack(str[start:end])
      start = end
      end += 72
      self.gyro_bias_covariance = _get_struct_9d().unpack(str[start:end])
      _x = self
      start = end
      end += 66
      (_x.gyro_bias_covariance_status, _x.linear_acceleration.x, _x.linear_acceleration.y, _x.linear_acceleration.z, _x.linear_acceleration_status, _x.angular_velocity.x, _x.angular_velocity.y, _x.angular_velocity.z, _x.angular_velocity_status,) = _get_struct_H8d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_4dH4d().pack(_x.quaternion.x, _x.quaternion.y, _x.quaternion.z, _x.quaternion.w, _x.quaternion_status, _x.euler_rpy.x, _x.euler_rpy.y, _x.euler_rpy.z, _x.euler_rpy_status))
      buff.write(self.euler_angle_covariance.tostring())
      _x = self
      buff.write(_get_struct_H8dH().pack(_x.euler_angle_covariance_status, _x.heading_update_alt, _x.heading_update_LORD, _x.heading_update_uncertainty, _x.heading_update_source, _x.heading_update_flags, _x.gyro_bias.x, _x.gyro_bias.y, _x.gyro_bias.z, _x.gyro_bias_status))
      buff.write(self.gyro_bias_covariance.tostring())
      _x = self
      buff.write(_get_struct_H8d().pack(_x.gyro_bias_covariance_status, _x.linear_acceleration.x, _x.linear_acceleration.y, _x.linear_acceleration.z, _x.linear_acceleration_status, _x.angular_velocity.x, _x.angular_velocity.y, _x.angular_velocity.z, _x.angular_velocity_status))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.quaternion is None:
        self.quaternion = geometry_msgs.msg.Quaternion()
      if self.euler_rpy is None:
        self.euler_rpy = geometry_msgs.msg.Vector3()
      if self.gyro_bias is None:
        self.gyro_bias = geometry_msgs.msg.Vector3()
      if self.linear_acceleration is None:
        self.linear_acceleration = geometry_msgs.msg.Vector3()
      if self.angular_velocity is None:
        self.angular_velocity = geometry_msgs.msg.Vector3()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 66
      (_x.quaternion.x, _x.quaternion.y, _x.quaternion.z, _x.quaternion.w, _x.quaternion_status, _x.euler_rpy.x, _x.euler_rpy.y, _x.euler_rpy.z, _x.euler_rpy_status,) = _get_struct_4dH4d().unpack(str[start:end])
      start = end
      end += 72
      self.euler_angle_covariance = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=9)
      _x = self
      start = end
      end += 68
      (_x.euler_angle_covariance_status, _x.heading_update_alt, _x.heading_update_LORD, _x.heading_update_uncertainty, _x.heading_update_source, _x.heading_update_flags, _x.gyro_bias.x, _x.gyro_bias.y, _x.gyro_bias.z, _x.gyro_bias_status,) = _get_struct_H8dH().unpack(str[start:end])
      start = end
      end += 72
      self.gyro_bias_covariance = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=9)
      _x = self
      start = end
      end += 66
      (_x.gyro_bias_covariance_status, _x.linear_acceleration.x, _x.linear_acceleration.y, _x.linear_acceleration.z, _x.linear_acceleration_status, _x.angular_velocity.x, _x.angular_velocity.y, _x.angular_velocity.z, _x.angular_velocity_status,) = _get_struct_H8d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_H8dH = None
def _get_struct_H8dH():
    global _struct_H8dH
    if _struct_H8dH is None:
        _struct_H8dH = struct.Struct("<H8dH")
    return _struct_H8dH
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_H8d = None
def _get_struct_H8d():
    global _struct_H8d
    if _struct_H8d is None:
        _struct_H8d = struct.Struct("<H8d")
    return _struct_H8d
_struct_4dH4d = None
def _get_struct_4dH4d():
    global _struct_4dH4d
    if _struct_4dH4d is None:
        _struct_4dH4d = struct.Struct("<4dH4d")
    return _struct_4dH4d
_struct_9d = None
def _get_struct_9d():
    global _struct_9d
    if _struct_9d is None:
        _struct_9d = struct.Struct("<9d")
    return _struct_9d
