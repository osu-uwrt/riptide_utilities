// Generated by gencpp from file nortek_dvl/DvlStatus.msg
// DO NOT EDIT!


#ifndef NORTEK_DVL_MESSAGE_DVLSTATUS_H
#define NORTEK_DVL_MESSAGE_DVLSTATUS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace nortek_dvl
{
template <class ContainerAllocator>
struct DvlStatus_
{
  typedef DvlStatus_<ContainerAllocator> Type;

  DvlStatus_()
    : header()
    , b1_vel_valid(false)
    , b2_vel_valid(false)
    , b3_vel_valid(false)
    , b4_vel_valid(false)
    , b1_dist_valid(false)
    , b2_dist_valid(false)
    , b3_dist_valid(false)
    , b4_dist_valid(false)
    , b1_fom_valid(false)
    , b2_fom_valid(false)
    , b3_fom_valid(false)
    , b4_fom_valid(false)
    , x_vel_valid(false)
    , y_vel_valid(false)
    , z1_vel_valid(false)
    , z2_vel_valid(false)
    , x_fom_valid(false)
    , y_fom_valid(false)
    , z1_fom_valid(false)
    , z2_fom_valid(false)
    , proc_cap(0)
    , wakeup_state()  {
    }
  DvlStatus_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , b1_vel_valid(false)
    , b2_vel_valid(false)
    , b3_vel_valid(false)
    , b4_vel_valid(false)
    , b1_dist_valid(false)
    , b2_dist_valid(false)
    , b3_dist_valid(false)
    , b4_dist_valid(false)
    , b1_fom_valid(false)
    , b2_fom_valid(false)
    , b3_fom_valid(false)
    , b4_fom_valid(false)
    , x_vel_valid(false)
    , y_vel_valid(false)
    , z1_vel_valid(false)
    , z2_vel_valid(false)
    , x_fom_valid(false)
    , y_fom_valid(false)
    , z1_fom_valid(false)
    , z2_fom_valid(false)
    , proc_cap(0)
    , wakeup_state(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef uint8_t _b1_vel_valid_type;
  _b1_vel_valid_type b1_vel_valid;

   typedef uint8_t _b2_vel_valid_type;
  _b2_vel_valid_type b2_vel_valid;

   typedef uint8_t _b3_vel_valid_type;
  _b3_vel_valid_type b3_vel_valid;

   typedef uint8_t _b4_vel_valid_type;
  _b4_vel_valid_type b4_vel_valid;

   typedef uint8_t _b1_dist_valid_type;
  _b1_dist_valid_type b1_dist_valid;

   typedef uint8_t _b2_dist_valid_type;
  _b2_dist_valid_type b2_dist_valid;

   typedef uint8_t _b3_dist_valid_type;
  _b3_dist_valid_type b3_dist_valid;

   typedef uint8_t _b4_dist_valid_type;
  _b4_dist_valid_type b4_dist_valid;

   typedef uint8_t _b1_fom_valid_type;
  _b1_fom_valid_type b1_fom_valid;

   typedef uint8_t _b2_fom_valid_type;
  _b2_fom_valid_type b2_fom_valid;

   typedef uint8_t _b3_fom_valid_type;
  _b3_fom_valid_type b3_fom_valid;

   typedef uint8_t _b4_fom_valid_type;
  _b4_fom_valid_type b4_fom_valid;

   typedef uint8_t _x_vel_valid_type;
  _x_vel_valid_type x_vel_valid;

   typedef uint8_t _y_vel_valid_type;
  _y_vel_valid_type y_vel_valid;

   typedef uint8_t _z1_vel_valid_type;
  _z1_vel_valid_type z1_vel_valid;

   typedef uint8_t _z2_vel_valid_type;
  _z2_vel_valid_type z2_vel_valid;

   typedef uint8_t _x_fom_valid_type;
  _x_fom_valid_type x_fom_valid;

   typedef uint8_t _y_fom_valid_type;
  _y_fom_valid_type y_fom_valid;

   typedef uint8_t _z1_fom_valid_type;
  _z1_fom_valid_type z1_fom_valid;

   typedef uint8_t _z2_fom_valid_type;
  _z2_fom_valid_type z2_fom_valid;

   typedef int8_t _proc_cap_type;
  _proc_cap_type proc_cap;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _wakeup_state_type;
  _wakeup_state_type wakeup_state;





  typedef boost::shared_ptr< ::nortek_dvl::DvlStatus_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::nortek_dvl::DvlStatus_<ContainerAllocator> const> ConstPtr;

}; // struct DvlStatus_

typedef ::nortek_dvl::DvlStatus_<std::allocator<void> > DvlStatus;

typedef boost::shared_ptr< ::nortek_dvl::DvlStatus > DvlStatusPtr;
typedef boost::shared_ptr< ::nortek_dvl::DvlStatus const> DvlStatusConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::nortek_dvl::DvlStatus_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::nortek_dvl::DvlStatus_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace nortek_dvl

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': True}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'nortek_dvl': ['/home/pparekh/osu-uwrt/riptide_software/src/riptide_utilities/setup_scripts/dependencies/src/nortek_dvl/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::nortek_dvl::DvlStatus_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::nortek_dvl::DvlStatus_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::nortek_dvl::DvlStatus_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::nortek_dvl::DvlStatus_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::nortek_dvl::DvlStatus_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::nortek_dvl::DvlStatus_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::nortek_dvl::DvlStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "e1789433d0fd4a0c672172f8d32e464d";
  }

  static const char* value(const ::nortek_dvl::DvlStatus_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xe1789433d0fd4a0cULL;
  static const uint64_t static_value2 = 0x672172f8d32e464dULL;
};

template<class ContainerAllocator>
struct DataType< ::nortek_dvl::DvlStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "nortek_dvl/DvlStatus";
  }

  static const char* value(const ::nortek_dvl::DvlStatus_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::nortek_dvl::DvlStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n\
\n\
bool b1_vel_valid\n\
bool b2_vel_valid\n\
bool b3_vel_valid\n\
bool b4_vel_valid\n\
\n\
bool b1_dist_valid\n\
bool b2_dist_valid\n\
bool b3_dist_valid\n\
bool b4_dist_valid\n\
\n\
bool b1_fom_valid\n\
bool b2_fom_valid\n\
bool b3_fom_valid\n\
bool b4_fom_valid\n\
\n\
bool x_vel_valid\n\
bool y_vel_valid\n\
bool z1_vel_valid\n\
bool z2_vel_valid\n\
\n\
bool x_fom_valid\n\
bool y_fom_valid\n\
bool z1_fom_valid\n\
bool z2_fom_valid\n\
\n\
int8 proc_cap\n\
string wakeup_state\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
";
  }

  static const char* value(const ::nortek_dvl::DvlStatus_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::nortek_dvl::DvlStatus_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.b1_vel_valid);
      stream.next(m.b2_vel_valid);
      stream.next(m.b3_vel_valid);
      stream.next(m.b4_vel_valid);
      stream.next(m.b1_dist_valid);
      stream.next(m.b2_dist_valid);
      stream.next(m.b3_dist_valid);
      stream.next(m.b4_dist_valid);
      stream.next(m.b1_fom_valid);
      stream.next(m.b2_fom_valid);
      stream.next(m.b3_fom_valid);
      stream.next(m.b4_fom_valid);
      stream.next(m.x_vel_valid);
      stream.next(m.y_vel_valid);
      stream.next(m.z1_vel_valid);
      stream.next(m.z2_vel_valid);
      stream.next(m.x_fom_valid);
      stream.next(m.y_fom_valid);
      stream.next(m.z1_fom_valid);
      stream.next(m.z2_fom_valid);
      stream.next(m.proc_cap);
      stream.next(m.wakeup_state);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct DvlStatus_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::nortek_dvl::DvlStatus_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::nortek_dvl::DvlStatus_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "b1_vel_valid: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.b1_vel_valid);
    s << indent << "b2_vel_valid: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.b2_vel_valid);
    s << indent << "b3_vel_valid: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.b3_vel_valid);
    s << indent << "b4_vel_valid: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.b4_vel_valid);
    s << indent << "b1_dist_valid: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.b1_dist_valid);
    s << indent << "b2_dist_valid: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.b2_dist_valid);
    s << indent << "b3_dist_valid: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.b3_dist_valid);
    s << indent << "b4_dist_valid: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.b4_dist_valid);
    s << indent << "b1_fom_valid: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.b1_fom_valid);
    s << indent << "b2_fom_valid: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.b2_fom_valid);
    s << indent << "b3_fom_valid: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.b3_fom_valid);
    s << indent << "b4_fom_valid: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.b4_fom_valid);
    s << indent << "x_vel_valid: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.x_vel_valid);
    s << indent << "y_vel_valid: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.y_vel_valid);
    s << indent << "z1_vel_valid: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.z1_vel_valid);
    s << indent << "z2_vel_valid: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.z2_vel_valid);
    s << indent << "x_fom_valid: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.x_fom_valid);
    s << indent << "y_fom_valid: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.y_fom_valid);
    s << indent << "z1_fom_valid: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.z1_fom_valid);
    s << indent << "z2_fom_valid: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.z2_fom_valid);
    s << indent << "proc_cap: ";
    Printer<int8_t>::stream(s, indent + "  ", v.proc_cap);
    s << indent << "wakeup_state: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.wakeup_state);
  }
};

} // namespace message_operations
} // namespace ros

#endif // NORTEK_DVL_MESSAGE_DVLSTATUS_H
