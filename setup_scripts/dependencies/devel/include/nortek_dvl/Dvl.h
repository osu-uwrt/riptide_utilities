// Generated by gencpp from file nortek_dvl/Dvl.msg
// DO NOT EDIT!


#ifndef NORTEK_DVL_MESSAGE_DVL_H
#define NORTEK_DVL_MESSAGE_DVL_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <geometry_msgs/Vector3.h>

namespace nortek_dvl
{
template <class ContainerAllocator>
struct Dvl_
{
  typedef Dvl_<ContainerAllocator> Type;

  Dvl_()
    : header()
    , time(0.0)
    , dt1(0.0)
    , dt2(0.0)
    , velocity()
    , figureOfMerit(0.0)
    , beamDistance()
    , batteryVoltage(0.0)
    , speedSound(0.0)
    , pressure(0.0)
    , temp(0.0)  {
      beamDistance.assign(0.0);
  }
  Dvl_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , time(0.0)
    , dt1(0.0)
    , dt2(0.0)
    , velocity(_alloc)
    , figureOfMerit(0.0)
    , beamDistance()
    , batteryVoltage(0.0)
    , speedSound(0.0)
    , pressure(0.0)
    , temp(0.0)  {
  (void)_alloc;
      beamDistance.assign(0.0);
  }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef double _time_type;
  _time_type time;

   typedef double _dt1_type;
  _dt1_type dt1;

   typedef double _dt2_type;
  _dt2_type dt2;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _velocity_type;
  _velocity_type velocity;

   typedef double _figureOfMerit_type;
  _figureOfMerit_type figureOfMerit;

   typedef boost::array<double, 4>  _beamDistance_type;
  _beamDistance_type beamDistance;

   typedef double _batteryVoltage_type;
  _batteryVoltage_type batteryVoltage;

   typedef double _speedSound_type;
  _speedSound_type speedSound;

   typedef double _pressure_type;
  _pressure_type pressure;

   typedef double _temp_type;
  _temp_type temp;





  typedef boost::shared_ptr< ::nortek_dvl::Dvl_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::nortek_dvl::Dvl_<ContainerAllocator> const> ConstPtr;

}; // struct Dvl_

typedef ::nortek_dvl::Dvl_<std::allocator<void> > Dvl;

typedef boost::shared_ptr< ::nortek_dvl::Dvl > DvlPtr;
typedef boost::shared_ptr< ::nortek_dvl::Dvl const> DvlConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::nortek_dvl::Dvl_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::nortek_dvl::Dvl_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace nortek_dvl

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': True}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'nortek_dvl': ['/home/pparekh/osu-uwrt/riptide_software/src/riptide_utilities/setup_scripts/dependencies/src/nortek_dvl/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::nortek_dvl::Dvl_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::nortek_dvl::Dvl_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::nortek_dvl::Dvl_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::nortek_dvl::Dvl_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::nortek_dvl::Dvl_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::nortek_dvl::Dvl_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::nortek_dvl::Dvl_<ContainerAllocator> >
{
  static const char* value()
  {
    return "b1ec29ea990029dc78359fd83b508011";
  }

  static const char* value(const ::nortek_dvl::Dvl_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xb1ec29ea990029dcULL;
  static const uint64_t static_value2 = 0x78359fd83b508011ULL;
};

template<class ContainerAllocator>
struct DataType< ::nortek_dvl::Dvl_<ContainerAllocator> >
{
  static const char* value()
  {
    return "nortek_dvl/Dvl";
  }

  static const char* value(const ::nortek_dvl::Dvl_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::nortek_dvl::Dvl_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n\
float64 time    #ping time\n\
float64 dt1     #time from trigger to center of water track cell\n\
float64 dt2     #time from start of output message to center of water track cell\n\
geometry_msgs/Vector3 velocity\n\
float64 figureOfMerit\n\
float64[4] beamDistance\n\
float64 batteryVoltage\n\
float64 speedSound\n\
float64 pressure\n\
float64 temp\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Vector3\n\
# This represents a vector in free space. \n\
# It is only meant to represent a direction. Therefore, it does not\n\
# make sense to apply a translation to it (e.g., when applying a \n\
# generic rigid transformation to a Vector3, tf2 will only apply the\n\
# rotation). If you want your data to be translatable too, use the\n\
# geometry_msgs/Point message instead.\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
";
  }

  static const char* value(const ::nortek_dvl::Dvl_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::nortek_dvl::Dvl_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.time);
      stream.next(m.dt1);
      stream.next(m.dt2);
      stream.next(m.velocity);
      stream.next(m.figureOfMerit);
      stream.next(m.beamDistance);
      stream.next(m.batteryVoltage);
      stream.next(m.speedSound);
      stream.next(m.pressure);
      stream.next(m.temp);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Dvl_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::nortek_dvl::Dvl_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::nortek_dvl::Dvl_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "time: ";
    Printer<double>::stream(s, indent + "  ", v.time);
    s << indent << "dt1: ";
    Printer<double>::stream(s, indent + "  ", v.dt1);
    s << indent << "dt2: ";
    Printer<double>::stream(s, indent + "  ", v.dt2);
    s << indent << "velocity: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.velocity);
    s << indent << "figureOfMerit: ";
    Printer<double>::stream(s, indent + "  ", v.figureOfMerit);
    s << indent << "beamDistance[]" << std::endl;
    for (size_t i = 0; i < v.beamDistance.size(); ++i)
    {
      s << indent << "  beamDistance[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.beamDistance[i]);
    }
    s << indent << "batteryVoltage: ";
    Printer<double>::stream(s, indent + "  ", v.batteryVoltage);
    s << indent << "speedSound: ";
    Printer<double>::stream(s, indent + "  ", v.speedSound);
    s << indent << "pressure: ";
    Printer<double>::stream(s, indent + "  ", v.pressure);
    s << indent << "temp: ";
    Printer<double>::stream(s, indent + "  ", v.temp);
  }
};

} // namespace message_operations
} // namespace ros

#endif // NORTEK_DVL_MESSAGE_DVL_H
